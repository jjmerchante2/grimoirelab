name: Release GrimoireLab component

on:
  workflow_call:
    inputs:
      git_email:
        description: 'Git config email'
        type: string
        required: true
      git_name:
        description: 'Git config name'
        type: string
        required: true
      release_candidate:
        description: 'Create a release candidate version'
        type: string
        required: true
      module_name:
        description: 'Name of the module'
        type: string
        required: true
      module_repository:
        description: 'Repository of the module'
        type: string
        required: true
      module_directory:
        description: 'Location of the module in Grimoirelab'
        type: string
        required: true
      dependencies:
        description: 'Package dependencies and their version'
        type: string
        required: true
    secrets:
      access_token:
        description: 'Token for updating repositories'
        required: true

    outputs:
      package_version:
        description: "Package version formatted for Poetry"
        value: ${{ jobs.release.outputs.package_version }}
      version:
        description: "Version number for the package"
        value: ${{ jobs.release.outputs.version }}
      notes:
        description: "Notes content for the package"
        value: ${{ jobs.release.outputs.notes }}
      changed_version:
        description: "The version changed was major (4), minor (2), patch (1) or not changed (0)"
        value: ${{ jobs.release.outputs.changed_version }}

jobs:
  release:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
      package_version: ${{ steps.version.outputs.package_version }}
      notes: ${{ steps.notes.outputs.notes }}
      changed_version: ${{ steps.changed-version.outputs.changed }}

    steps:
      - uses: actions/checkout@v2

      - name: Set up Python 3.8
        uses: actions/setup-python@v2
        with:
          python-version: 3.8

      - name: Set up Git config
        run: |
          git config --global user.email "${{ inputs.git_email }}"
          git config --global user.name "${{ inputs.git_name }}"

      - name: Configure repository credentials
        run: |
          git submodule set-url ${{ inputs.module_directory }} https://${{ secrets.access_token }}@github.com/${{ inputs.module_repository }}.git

      - name: Checkout submodule ${{ inputs.module_directory }}
        run: |
          git submodule update --init --remote ${{ inputs.module_directory }}
          cd ${{ inputs.module_directory }}
          git checkout master

      - name: Install poetry
        run: |
          curl -sSL https://install.python-poetry.org | python3 -
          echo "PATH=$HOME/.poetry/bin:$PATH" >> $GITHUB_ENV
        shell: bash

      - name: Install release-tools
        #TODO: Change to the latest version once the new release is created
        run: pip install git+https://github.com/Bitergia/release-tools.git#egg=release-tools

      - id: old-version
        name: Get old version
        run: |
          version=$(poetry version -s)
          echo "::set-output name=version::$version"
        working-directory: ${{ inputs.module_directory }}

      - id: check-dependencies
        name: Check if package dependencies exist
        run: |
          dependencies="${{ inputs.dependencies }}"
          if [ ! -z "$dependencies" ]
          then
            for i in $(seq 5)
            do
              poetry add --lock --dry-run $dependencies && exit 0
              sleep 10
            done
            exit 1
          fi

      - id: version
        name: Get current version
        run: |
          version=$(poetry version -s)
          package_version="${{ inputs.module_name }}@>=$version"
          echo "::set-output name=package_version::$package_version"
          echo "::set-output name=version::$version"
          echo $package_version
        working-directory: ${{ inputs.module_directory }}

      - id: changed-version
        name: Get the version changed
        run: |
          BUMP_MAJOR=4
          BUMP_MINOR=2
          BUMP_PATCH=1
          current=${{ steps.version.outputs.version }}
          old=${{ steps.old-version.outputs.version }}
          # Remove rc part
          current=${current%-*}
          old=${old%-*}
          currentArr=(${current//./ })
          oldArr=(${old//./ })
          if [ ${currentArr[0]} -gt ${oldArr[0]} ]
          then
            echo "::set-output name=changed::$BUMP_MAJOR"
            echo "Major"
          elif [ ${currentArr[1]} -gt ${oldArr[1]} ]
          then
            echo "::set-output name=changed::$BUMP_MINOR"
            echo "Minor"
          elif [ ${currentArr[2]} -gt ${oldArr[2]} ]
          then
            echo "::set-output name=changed::$BUMP_PATCH"
            echo "Patch"
          else
            echo "::set-output name=changed::0"
            echo "Not changed"
          fi


      - id: check-package-ready
        name: Wait for package ready in PyPI
        shell: bash
        run: |
          package="${{ inputs.module_name }}"
          version="${{ steps.version.outputs.version }}"
          # Format version 1.2.3-rc.1 to 1.2.3rc1
          versionNum=${version%-*}
          versionRC=${version#$versionNum}
          versionRC=${versionRC//[-.]/}
          currentVersion="${versionNum}${versionRC}"

          pip install --upgrade pip
          for i in $(seq 20)
          do
            pip index versions --pre $package > pip_versions.txt
            pipVersion=$(cat pip_versions.txt | head -n 1 | cut -f2 -d '(' | cut -f1 -d ')')
            echo "$currentVersion $pipVersion"
            if [ "$pipVersion" = "$currentVersion" ]
            then
              echo "Same version"
              exit 0
            fi
            echo "Wait for PyPI..."
            sleep 10
          done
          echo "Latest version doesn't match after several retries"
          exit 1
