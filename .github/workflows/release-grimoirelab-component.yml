name: Release GrimoireLab component

on:
  workflow_call:
    inputs:
      git_email:
        description: 'Git config email'
        type: string
        required: true
      git_name:
        description: 'Git config name'
        type: string
        required: true
      release_candidate:
        description: 'Create a release candidate version'
        type: string
        required: true
      module_name:
        description: 'Name of the module'
        type: string
        required: true
      module_repository:
        description: 'Repository of the module'
        type: string
        required: true
      module_directory:
        description: 'Location of the module in Grimoirelab'
        type: string
        required: true
      dependencies:
        description: 'Package dependencies and their version'
        type: string
        required: true
    secrets:
      access_token:
        description: 'Token for updating repositories'
        required: true

    outputs:
      package_version:
        description: "Package version formatted for Poetry"
        value: ${{ jobs.release.outputs.package_version }}
      version:
        description: "Version number for the package"
        value: ${{ jobs.release.outputs.version }}
      notes:
        description: "Notes content for the package"
        value: ${{ jobs.release.outputs.notes }}
      changed_version:
        description: "The version changed was major (4), minor (2), patch (1) or not changed (0)"
        value: ${{ jobs.release.outputs.changed_version }}

jobs:
  release:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
      package_version: ${{ steps.version.outputs.package_version }}
      notes: ${{ steps.notes.outputs.notes }}

    steps:
      - uses: actions/checkout@v2

      - name: Set up Python 3.8
        uses: actions/setup-python@v2
        with:
          python-version: 3.8

      - name: Set up Git config
        run: |
          git config --global user.email "${{ inputs.git_email }}"
          git config --global user.name "${{ inputs.git_name }}"

      - name: Configure repository credentials
        run: |
          git submodule set-url ${{ inputs.module_directory }} https://${{ secrets.access_token }}@github.com/${{ inputs.module_repository }}.git

      - name: Checkout submodule ${{ inputs.module_directory }}
        run: |
          git submodule update --init --remote ${{ inputs.module_directory }}
          cd ${{ inputs.module_directory }}
          git checkout master

      - name: Install poetry
        run: |
          curl -sSL https://install.python-poetry.org | python3 -
          echo "PATH=$HOME/.poetry/bin:$PATH" >> $GITHUB_ENV
        shell: bash

      - name: Install release-tools
        #TODO: Change to the latest version once the new release is created
        run: pip install git+https://github.com/Bitergia/release-tools.git#egg=release-tools

      - id: semverup
        name: Update version number
        continue-on-error: true
        shell: bash {0}
        run: |
          if [ ${{ inputs.release_candidate }} == 'true' ]
          then
            rcArg='--pre-release'
          else
            rcArg=''
          fi

          echo "Dependencies updated, force new version"
          version=$(semverup --bump-version patch $rcArg)
          echo "::set-output name=forced_version::true"

          echo $version
          if [ -z $version ]; then exit 1; fi
        working-directory: ${{ inputs.module_directory }}

      - id: version
        name: Get current version
        run: |
          version=$(poetry version -s)
          package_version="${{ inputs.module_name }}@>=$version"
          echo "::set-output name=package_version::$package_version"
          echo "::set-output name=version::$version"
          echo $package_version
        working-directory: ${{ inputs.module_directory }}

      - id: notes-forced-version
        name: Generate release notes for updated dependencies
        if: steps.semverup.outcome == 'success' && steps.semverup.outputs.forced_version == 'true'
        run: |
          version=${{ steps.version.outputs.version }}
          module_name=${{ inputs.module_name }}
          today=$(date -u "+%Y-%m-%d")
          cat << EOF > releases/$version.md
          ## $module_name $version - ($today)

          * Update Poetry's package dependencies
          EOF

          version_notes="$(cat releases/$version.md)"
          version_notes="${version_notes//$'\n'/'%0A'}"
          echo "::set-output name=notes::$version_notes"
        working-directory: ${{ inputs.module_directory }}
